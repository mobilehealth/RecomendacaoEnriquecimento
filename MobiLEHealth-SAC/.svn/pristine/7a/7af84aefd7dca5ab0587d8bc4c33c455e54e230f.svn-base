package mobilehealth.sac.augmentation;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.net.HttpURLConnection;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import mobilehealth.sac.util.Util;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.io.ByteArrayInputStream;

/**
 * Identifies the language of a resource
 * 
 * Return a string with a acronym of the language. The acronyms are described in the documentation
 * of the tool: https://textalytics.com/core/lang-info#doc
 * 
 * @author Salatiel Dantas
 * @date 25/09/2014
 * 
 */
public class LanguageIdentifier {

	private static String KEY_LANGUAGE_IDENTIFICATION = "d336122bb6dba52cfb4aa7addbedf5b9";
	private static String URL_API = "http://textalytics.com/core/lang-1.1";

	private URL url;
	private String UrlParameters;

	/**
	 * Default Constructor
	 * 
	 * @throws MalformedURLException
	 */
	public LanguageIdentifier() throws MalformedURLException {
		this.url = new URL(URL_API);
		resetParameters();
	}

	/**
	 * Reset URLParameters with mandatory parameters.
	 */
	private void resetParameters() {

		this.UrlParameters = "";

		/* Mandatory Parameters */
		try {
			addParameter("src", "sdk-java-1.1");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Detect the language of content.
	 * 
	 * @param content
	 * @return String with a acronym of the language
	 * @throws IOException
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * 
	 */
	public String getLanguageIdentification(String content) throws IOException, ParserConfigurationException, SAXException {

		/* Reset variables */
		resetParameters();

		/* Define type of content */
		String contentType = Util.isUrl(content) ? "url" : "txt";

		/*
		 * Set parameters to run language identification tool the parameter "of" define a type of
		 * return
		 */
		addParameter("key", KEY_LANGUAGE_IDENTIFICATION);
		addParameter(contentType, content);
		addParameter("of", "xml");

		return responseAnalyses(sendHttpRequest());

	}

	/**
	 * Sends HTTP request and gets the response.
	 * 
	 * The result of the request is a list with all the possible languages ​​for the content, sorted
	 * in descending order of probability.
	 * 
	 * @return HTTP request response
	 * @throws IOException
	 */
	private String sendHttpRequest() throws IOException {

		/* Mounts the HTTP request header */
		HttpURLConnection conn = (HttpURLConnection) this.url.openConnection();

		conn.setDoOutput(true);
		conn.setInstanceFollowRedirects(false);
		conn.setRequestProperty("Accept-Charset", "utf-8");
		conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		conn.setRequestProperty("charset", "utf-8");
		conn.setRequestMethod("POST");
		conn.setUseCaches(false);
		conn.setRequestProperty("Content-Length", "" + Integer.toString(UrlParameters.getBytes().length));

		/* Set parameters in the HTTP Request */
		try {
			OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
			writer.write(UrlParameters);
			writer.flush();
		} catch (Exception e) {
			System.out.println("Error: " + e.getMessage());
		}

		/* Read response of the HTTP request */
		String response = "";
		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		String line;

		while ((line = rd.readLine()) != null) {
			response += line;
		}

		/* Close HTTP request */
		conn.disconnect();

		return response;

	}

	/**
	 * The sending of content to be rendered is done through HTTP request. This method formats a
	 * specific parameter in a URL format. This URL will be send to identification language process
	 * with configuration parameters
	 * 
	 * @param parameter
	 * @param value
	 * @throws UnsupportedEncodingException
	 */
	private void addParameter(String parameter, String value) throws UnsupportedEncodingException {

		/*
		 * Checks if there is already a parameter defined in the string. As it is a URL the
		 * parameters are separated by &.
		 */
		if (UrlParameters.length() > 0) {
			UrlParameters += "&";
		}

		UrlParameters += URLEncoder.encode(parameter, "UTF-8") + "=" + URLEncoder.encode(value, "UTF-8");

	}

	/**
	 * 
	 * @param response
	 * @return
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	private String responseAnalyses(String response) throws ParserConfigurationException, SAXException, IOException {

		String output = "";
		DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Document doc = docBuilder.parse(new ByteArrayInputStream(response.getBytes()));
		
		doc.getDocumentElement().normalize();
		Element response_node = doc.getDocumentElement();

		try {
			NodeList status_list = response_node.getElementsByTagName("status");
			Node status = status_list.item(0);
			NamedNodeMap attributes = status.getAttributes();
			Node code = attributes.item(0);
			if (!code.getTextContent().equals("0")) {
				return "";
			} else {
				NodeList lang_list = response_node.getElementsByTagName("lang_list");
				if (lang_list.getLength() > 0) {
					Node langs = lang_list.item(0);
					NodeList lang = langs.getChildNodes();
					// String output = "";
					for (int i = 0; i < lang.getLength(); i++) {
						Node lang_item = lang.item(i);
						String lang_detected = lang_item.getTextContent();
						output += lang_detected;
					}
					if (output.isEmpty())
						return "";
					else
						;
				}
			}
		} catch (Exception e) {
			return "";
		}

		return output.substring(0, 2);
	}
}
